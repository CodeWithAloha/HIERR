// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model SurveyQuestion {
  id                String              @id @default(cuid())
  question          String
  position          Int
  answers           SurveyAnswer[]
  UserSurveyAnswers UserSurveyAnswers[]
  questionType      String
}

model SurveyAnswer {
  id                String              @id @default(cuid())
  questionId        String
  question          SurveyQuestion      @relation(fields: [questionId], references: [id])
  answer            String
  position          Int
  answerType        String
}

model UserSurveyAnswers {
  id         String         @id @default(cuid())
  userId     String
  questionId String
  answerValue String
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  question   SurveyQuestion @relation(fields: [questionId], references: [id], onUpdate: NoAction, onDelete: NoAction)
}

model ZipCode {
  id      String @id @default(cuid())
  userId  String @unique
  zipcode String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CensusTract {
  id   String @id
  name String
  user User?
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PolisUser {
  id                String @id @default(cuid())
  xid               String // This field gets tied to the xid field in the User model
  pid               String // This participant id is used to identify the user in the polis conversation, comes from polis on a survey basis
  sid               String // This is the polis survey id
}

model User {
  id                String              @id @default(cuid())
  xid               String              @unique @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  censusTractId     String?             @unique
  accounts          Account[]
  sessions          Session[]
  zipcode           ZipCode?
  censustract       CensusTract?        @relation(fields: [censusTractId], references: [id])
  UserSurveyAnswers UserSurveyAnswers[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
